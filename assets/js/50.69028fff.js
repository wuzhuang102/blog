(window.webpackJsonp=window.webpackJsonp||[]).push([[50],{298:function(t,a,s){"use strict";s.r(a);var e=s(28),n=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"基础篇-js-基础概念-二"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基础篇-js-基础概念-二"}},[t._v("#")]),t._v(" 基础篇 --- JS 基础概念(二)")]),t._v(" "),s("h2",{attrs:{id:"_1-原型与原型链"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-原型与原型链"}},[t._v("#")]),t._v(" 1. 原型与原型链")]),t._v(" "),s("ol",[s("li",[t._v("prototype\n"),s("ul",[s("li",[t._v("每个函数都有一个 prottotype 属性，这个属性指向函数的原型对象")]),t._v(" "),s("li",[t._v("原型的概念：每个 javascript 对象（除 null 外）创建的时候，都会与之关联另一个对象，这个对象就是我们所说的原型")])])]),t._v(" "),s("li",[t._v("__proto__\n"),s("ul",[s("li",[t._v("每个对象（除了 null）都有的属性，指向该对象的原型")])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Person")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" person "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("person"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__proto__ "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])]),t._v(" "),s("li",[t._v("constructor\n"),s("ul",[s("li",[t._v("每个原型都有一个 constructor 属性，指向该关联的构造函数")])])]),t._v(" "),s("li",[t._v("实例与原型\n"),s("ul",[s("li",[t._v("读取实例的属性时，如果找不到，就会查找与对象关联的原型中的属性，如果还找不到，就找原型的原型，一直找到顶层为止")])])]),t._v(" "),s("li",[t._v("原型链 - 每个对象都有一个指向它原型(prototype)对象的内部指针（__proto__），这个原型对象又有自己的原型，直到某个对象的原型为 null 为止，组成这条链的最后一环。这种一级一级的链结构就成为原型链\n"),s("img",{staticClass:"zoom-img",attrs:{src:"/front-end/js/prototype.jpg"}})])]),t._v(" "),s("p",[t._v("注意 Function.prototype.__proto__ === Object.prototype，别问为什么，这时 ES 规范")]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"http://www.mollypages.org/tutorials/js.mp",target:"_blank",rel:"noopener noreferrer"}},[t._v("http://www.mollypages.org/tutorials/js.mp"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://github.com/creeperyang/blog/issues/9",target:"_blank",rel:"noopener noreferrer"}},[s("strong",[t._v("proto")]),t._v("和 prototype"),s("OutboundLink")],1)])]),t._v(" "),s("h2",{attrs:{id:"_2-this"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-this"}},[t._v("#")]),t._v(" 2. this")]),t._v(" "),s("p",[s("a",{attrs:{href:"/front-end/javascript/wiki/this%E7%9A%84%E6%8C%87%E5%90%91%E4%BB%A5%E5%8F%8AReference"}},[t._v("this 的指向以及 Reference")])]),t._v(" "),s("h2",{attrs:{id:"_3-eventloop"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-eventloop"}},[t._v("#")]),t._v(" 3. eventloop")]),t._v(" "),s("p",[s("a",{attrs:{href:"/front-end/javascript/wiki/eventloop"}},[t._v("eventloop")])]),t._v(" "),s("h2",{attrs:{id:"_4-new-操作符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-new-操作符"}},[t._v("#")]),t._v(" 4. new 操作符")]),t._v(" "),s("p",[t._v("new 运算符创建了一个用户定义的对象类型的实例或具有构造函数的内置对象的实例")]),t._v(" "),s("ul",[s("li",[t._v("创建一个空对象（{}）")]),t._v(" "),s("li",[t._v("链接该对象到另一个对象")]),t._v(" "),s("li",[t._v("将步骤一创建的对象作为 this 的上下文")]),t._v(" "),s("li",[t._v("如果该函数没有返回对象，则返回 this")])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("newOperator")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("fn")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" fn "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"function"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"the first param must be a function"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    newOperator"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("target "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" fn"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ES6 中的new.target指向的是构造函数")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" args "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Array")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("slice")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arguments"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" obj "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1. 创建空对象")]),t._v("\n    obj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__proto__ "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" fn"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 2. 链接新创建对象到函数的原型上")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 前两步可以直接使用 Object.create(fn.prototype)")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" result "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("fn")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("apply")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" args"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 3. 将新创建的对象作为 fn 的上下文 this")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" isObject "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" result "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"object"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" result "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" isFunction "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" result "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"function"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" isObject "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" isFunction "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" result "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" obj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 4. 如果函数没有返回对象，则创建新创建的对象")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("ul",[s("li",[s("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/new",target:"_blank",rel:"noopener noreferrer"}},[t._v("MDN - new 操作符"),s("OutboundLink")],1)])]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("注意")]),t._v(" "),s("p",[t._v("箭头函数没有 prototype（不是构造函数）、没有自己的 this 指向、不可以使用 arguments，所以无法进行 new 操作")])]),t._v(" "),s("h2",{attrs:{id:"_5-类型转换"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-类型转换"}},[t._v("#")]),t._v(" 5. 类型转换")]),t._v(" "),s("h3",{attrs:{id:"_5-1-toboolean"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-toboolean"}},[t._v("#")]),t._v(" 5.1 ToBoolean")]),t._v(" "),s("ul",[s("li",[t._v("显式转换："),s("code",[t._v("Boolean")]),t._v("、"),s("code",[t._v("!!")])]),t._v(" "),s("li",[t._v("隐式转换："),s("code",[t._v("if(..)")]),t._v("、"),s("code",[t._v("for(..;..;..)")]),t._v("、"),s("code",[t._v("while(..)")]),t._v("、"),s("code",[t._v("? :")]),t._v("、"),s("code",[t._v("|| &&")])])]),t._v(" "),s("ol",[s("li",[s("code",[t._v('""')]),t._v("、"),s("code",[t._v("0(+0,-0)")]),t._v("、"),s("code",[t._v("NaN")]),t._v("、"),s("code",[t._v("null")]),t._v("、"),s("code",[t._v("undefined")]),t._v(" 会转换成 false，其它都为 true")])]),t._v(" "),s("h3",{attrs:{id:"_5-2-tostring"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-2-tostring"}},[t._v("#")]),t._v(" 5.2 ToString")]),t._v(" "),s("ol",[s("li",[s("code",[t._v("null")]),t._v("：转换成 "),s("code",[t._v('"null"')])]),t._v(" "),s("li",[s("code",[t._v("undefined")]),t._v("：转换成 "),s("code",[t._v('"undefined"')])]),t._v(" "),s("li",[s("code",[t._v("Boolean")]),t._v("：转换成 "),s("code",[t._v('"true"')]),t._v("、"),s("code",[t._v('"false"')])]),t._v(" "),s("li",[s("code",[t._v("Number")]),t._v("：转换成 "),s("code",[t._v('"10"')]),t._v("、"),s("code",[t._v('"1e+21"')])]),t._v(" "),s("li",[s("code",[t._v("Array")]),t._v("：相当于调用 "),s("code",[t._v("Array.prototype.join()")]),t._v("，"),s("code",[t._v("null")]),t._v("、"),s("code",[t._v("undefined")]),t._v("被当空字符串处理")]),t._v(" "),s("li",[s("code",[t._v("Object")]),t._v("：详单于调用 "),s("code",[t._v("Object.prototype.toString()")]),t._v("，默认返回 "),s("code",[t._v('"[Object Object]"')])])]),t._v(" "),s("h3",{attrs:{id:"_5-3-tonumber"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-3-tonumber"}},[t._v("#")]),t._v(" 5.3 ToNumber")]),t._v(" "),s("ol",[s("li",[s("code",[t._v("null")]),t._v("：转换成 "),s("code",[t._v("0")])]),t._v(" "),s("li",[s("code",[t._v("undefined")]),t._v("：转换成 "),s("code",[t._v("NaN")])]),t._v(" "),s("li",[s("code",[t._v("String")]),t._v("：纯数字的字符串转成对应数字；空字符串转成 0；其它的一律按失败处理，转换 NaN")]),t._v(" "),s("li",[s("code",[t._v("Boolean")]),t._v("："),s("code",[t._v("true")]),t._v(" 转换成 1； "),s("code",[t._v("false")]),t._v(" 转换成 0")]),t._v(" "),s("li",[s("code",[t._v("Array | Object")]),t._v("：先转成原始类型 ToPrimitive，再按上面的规则处理")])]),t._v(" "),s("h3",{attrs:{id:"_5-4-toprimitive"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-4-toprimitive"}},[t._v("#")]),t._v(" 5.4 ToPrimitive")]),t._v(" "),s("p",[t._v("对象类型转原始类型")]),t._v(" "),s("ol",[s("li",[t._v("先查找对象的 "),s("code",[t._v("valueOf")]),t._v(" 方法，返回的若是原始类型的值，结果就是这个值")]),t._v(" "),s("li",[s("code",[t._v("valueOf")]),t._v(" 不存在或者返回的不是原始类型的值，就会调用 "),s("code",[t._v("toString")]),t._v(" ，返回若不是原始类型的值，就会抛出异常")]),t._v(" "),s("li",[t._v("不同类型的对象， ToPrivitive 规则有所不同， "),s("code",[t._v("Date")]),t._v(" 对象会先调用 "),s("code",[t._v("toString")])])]),t._v(" "),s("h3",{attrs:{id:"_5-5-宽松相等（-）时的隐式转换规则"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-5-宽松相等（-）时的隐式转换规则"}},[t._v("#")]),t._v(" 5.5 宽松相等（==）时的隐式转换规则")]),t._v(" "),s("ol",[s("li",[t._v("布尔与其它类型比较：布尔值先转换成数字类型")]),t._v(" "),s("li",[t._v("数字和字符串比较：字符串会被转换成数字")]),t._v(" "),s("li",[t._v("对象和原始类型做比较：对象依照 "),s("code",[t._v("ToPrimitive")]),t._v(" 转换成原始类型")]),t._v(" "),s("li",[t._v("两个都是对象：比较它们指向的内存是否相同")]),t._v(" "),s("li",[s("code",[t._v("null")]),t._v(" 与 "),s("code",[t._v("undefined")]),t._v(" 宽松相等，自身也宽松相等，除此之外都不相等")])]),t._v(" "),s("h3",{attrs:{id:"_5-6-二元运算符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-6-二元运算符"}},[t._v("#")]),t._v(" 5.6 + 二元运算符")]),t._v(" "),s("p",[t._v("value1 + value2，两个值先都转换成原始类型")]),t._v(" "),s("ol",[s("li",[t._v("左右两边有一方为字符串时，就全转为字符串计算")]),t._v(" "),s("li",[t._v("没有字符串，就全转换成数字计算")])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// '[object Object]'")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 0")]),t._v("\n")])])]),s("h2",{attrs:{id:"_6-for、for-of、for-in、foreach、map"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-for、for-of、for-in、foreach、map"}},[t._v("#")]),t._v(" 6. for、for..of、for..in、forEach、map")]),t._v(" "),s("ol",[s("li",[s("strong",[t._v("for")]),t._v(" 直接对接 C 的实现，性能是最好的")]),t._v(" "),s("li",[s("strong",[t._v("for...of")]),t._v("：遍历具有 iterator 接口的数据，循环可以中断")]),t._v(" "),s("li",[s("strong",[t._v("for...in")]),t._v("：遍历对象自身和继承的可枚举属性、可以中断循环")]),t._v(" "),s("li",[s("strong",[t._v("forEach 与 map")]),t._v(" 只能遍历数组，且 forEach 没有返回值")])]),t._v(" "),s("h2",{attrs:{id:"_7-迭代器（iterator）与生成器（generator）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-迭代器（iterator）与生成器（generator）"}},[t._v("#")]),t._v(" 7. 迭代器（iterator）与生成器（generator）")]),t._v(" "),s("h3",{attrs:{id:"_7-1-iterator"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-1-iterator"}},[t._v("#")]),t._v(" 7.1 iterator")]),t._v(" "),s("ul",[s("li",[t._v("作用\n"),s("ul",[s("li",[t._v("为各种数据结构，提供一个统一的、简便的访问接口")])])]),t._v(" "),s("li",[t._v("原生具有 iterator 接口的数据\n"),s("ul",[s("li",[t._v("Array、Set、Map、String、函数的 arguments、NodeList 对象")])])])]),t._v(" "),s("h3",{attrs:{id:"_7-2-generator"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-2-generator"}},[t._v("#")]),t._v(" 7.2 generator")]),t._v(" "),s("ul",[s("li",[t._v("概念\n"),s("ul",[s("li",[t._v("Generator 函数是 ES6 提供的一种异步编程解决方案")]),t._v(" "),s("li",[t._v("Generator 函数是一个状态机，封装了多个内部状态")]),t._v(" "),s("li",[t._v("Generator 函数除了状态机，还是一个遍历器对象生成函数\n"),s("ul",[s("li",[t._v("generator 函数就是遍历器生成函数，可以把他赋值给 Symbol.iterator 属性，从而实现 iterator 功能")])])])])]),t._v(" "),s("li",[t._v("如果想让一个普通对象支持 iterator 怎么办"),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 需要配合 generator")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("Symbol"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("iterator"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("of")]),t._v(" Object"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("entries")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("yield")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])])])])}),[],!1,null,null,null);a.default=n.exports}}]);