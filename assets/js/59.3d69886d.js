(window.webpackJsonp=window.webpackJsonp||[]).push([[59],{313:function(t,e,r){"use strict";r.r(e);var a=r(28),s=Object(a.a)({},(function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"源码篇-redux源码解析"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#源码篇-redux源码解析"}},[t._v("#")]),t._v(" 源码篇 --- Redux源码解析")]),t._v(" "),r("p",[r("img",{attrs:{src:"/front-end/js/redux-flux.png",alt:""}})]),t._v(" "),r("h2",{attrs:{id:"redux-核心思想"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#redux-核心思想"}},[t._v("#")]),t._v(" Redux 核心思想")]),t._v(" "),r("h3",{attrs:{id:"_1-redux-主要成员"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-redux-主要成员"}},[t._v("#")]),t._v(" 1. Redux 主要成员")]),t._v(" "),r("ol",[r("li",[r("strong",[t._v("Store")]),t._v("：Store 维持着应用的 state tree 对象，一个 Redux 应用只有一个 Store")]),t._v(" "),r("li",[r("strong",[t._v("State")]),t._v("：由store管理并由 "),r("code",[t._v("getState()")]),t._v(" 方法获得，表示应用的全部状态")]),t._v(" "),r("li",[r("strong",[t._v("Action")]),t._v("：\n"),r("ul",[r("li",[t._v("Action是把数据放入 store 的唯一路径，无论是 UI 事件、网络回调，最终都会被 dispatch 成 action")]),t._v(" "),r("li",[t._v("Action 只描述事情的发生，如何更新 state 由 reducer 完成")])])]),t._v(" "),r("li",[r("strong",[t._v("Reducer")]),t._v("：\n"),r("ul",[r("li",[t._v("指定了应用状态的变化如何响应 actions 并发送到 store 的")]),t._v(" "),r("li",[t._v("reducer 是一个"),r("a",{attrs:{href:"/front-end/javascript/functional-programming"}},[t._v("纯函数")])])])]),t._v(" "),r("li",[r("strong",[t._v("dispatch")]),t._v("：dispatch 函数负责发送 action 到 store")])]),t._v(" "),r("h3",{attrs:{id:"_2-redux运行流程"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-redux运行流程"}},[t._v("#")]),t._v(" 2. Redux运行流程")]),t._v(" "),r("ol",[r("li",[t._v("用户访问View")]),t._v(" "),r("li",[t._v("View 发出（dispatch）用户的 Action")]),t._v(" "),r("li",[t._v("Dispatcher 收到 Action，经过 Middleware(主要用于处理异步数据), 要求 Store 进行相应的更新")]),t._v(" "),r("li",[t._v("Store 将修改任务下发给 Reducer,Reducer 负责处理产生新的 State")]),t._v(" "),r("li",[t._v("State 更新后再去更新 View")])]),t._v(" "),r("h2",{attrs:{id:"源码解析"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#源码解析"}},[t._v("#")]),t._v(" 源码解析")]),t._v(" "),r("h3",{attrs:{id:"_1-createstore-js"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-createstore-js"}},[t._v("#")]),t._v(" 1. createStore.js")]),t._v(" "),r("p",[t._v("createStore.js 文件主要用来创建 store ,接收几个参数 "),r("code",[t._v("reducer")]),t._v("、"),r("code",[t._v("initState")]),t._v("、"),r("code",[t._v("enhancer?")])]),t._v(" "),r("p",[t._v("createStore.js 中定义了以下几个方法")]),t._v(" "),r("ul",[r("li",[t._v("getState()：返回当前 store 的 state")]),t._v(" "),r("li",[t._v("subcribe()： 注册一个listener，state 变化时执行此 listener")]),t._v(" "),r("li",[t._v("dispatch()：dispatch 向 store 发送 action")]),t._v(" "),r("li",[t._v("replaceReducer()：用于 reducer 的重载")])]),t._v(" "),r("h3",{attrs:{id:"_2-combinereducers-js"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-combinereducers-js"}},[t._v("#")]),t._v(" 2. combineReducers.js")]),t._v(" "),r("p",[t._v("combineReducers 负责将 reducer 整合到一起")]),t._v(" "),r("p",[t._v("diaptch 出一个 action 之后，会遍历执行所有的 reducer")]),t._v(" "),r("h3",{attrs:{id:"_3-applymiddleware-js"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3-applymiddleware-js"}},[t._v("#")]),t._v(" 3. applyMiddleware.js")]),t._v(" "),r("p",[t._v("applyMiddleware 的作用主要是重写 dispatch, 在执行 oldDispatch 之前执行 middleware")]),t._v(" "),r("h3",{attrs:{id:"_4-compose-js"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_4-compose-js"}},[t._v("#")]),t._v(" 4. compose.js")]),t._v(" "),r("p",[t._v("提供一个 "),r("RouterLink",{attrs:{to:"/front-end/javascript/functional-programming.html#_3-3-函数组合-compose"}},[t._v("compose")]),t._v(" 函数，负责组合函数列表")],1),t._v(" "),r("h3",{attrs:{id:"_5-bindactioncreators-js"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_5-bindactioncreators-js"}},[t._v("#")]),t._v(" 5. bindActionCreators.js")]),t._v(" "),r("p",[t._v("把 action creators 转成拥有同名 keys 的对象，使用 dispatch 把每个 action creator 包围起来，这样可以直接调用它们")])])}),[],!1,null,null,null);e.default=s.exports}}]);