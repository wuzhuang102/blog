(window.webpackJsonp=window.webpackJsonp||[]).push([[76],{329:function(t,e,a){"use strict";a.r(e);var s=a(28),l=Object(s.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"node-源码浅析-（基本篇）"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#node-源码浅析-（基本篇）"}},[t._v("#")]),t._v(" Node 源码浅析 --- （基本篇）")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("再见")]),t._v(" "),a("p",[t._v("算了，为时过早，干不动")])]),t._v(" "),a("h2",{attrs:{id:"文件目录"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#文件目录"}},[t._v("#")]),t._v(" 文件目录")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("| -- benchmark/\n| -- deps/\n| -- doc/\n| -- lib/\n|   | -- assert/\n|   | -- dns/\n|   | -- fs/\n|   | -- internal/              不对外暴露的方法，包装提供给api使用\n|   | -- timers/\n|   | -- _http_agent.js         node http分两个模块：agent基于客户端，提供一些代理功能\n|   | -- _http_client.js                            client发请求的\n|   | -- _http_incoming.js      node把所有消息分为两类：incoming对应 request\n|   | -- _http_outgoing.js                          outgoing对应 response\n|   | -- _http_server.js        server就是把incoming 和 outgoing 两个类串起来做一些解析\n|   | -- _stream_duplex.js      可读 && 可写，拥有双工的作用\n|   | -- _stream_passthrough.js \n|   | -- _stream_readable.js    可读流\n|   | -- _stream_transform.js\n|   | -- _stream_wrap.js        一个基类，readable、writeable、uplex、transform都是基于这个基础类实现的\n|   | -- _stream_writable.js    可写流\n|   | -- _tls_common.js         用于 ssl 接口暴露的实现，很多方法在 c++ 中实现\n|   | -- _tls_wrap.js           同上\n|   | -- **.js                  **---这些都是node对外提供的api---**\n| -- src/                       基于 c++ 的封装\n| -- test/\n| -- tools/\n")])])]),a("h2",{attrs:{id:"c-与-js交互"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#c-与-js交互"}},[t._v("#")]),t._v(" C++ 与 JS交互")]),t._v(" "),a("h2",{attrs:{id:"一些概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一些概念"}},[t._v("#")]),t._v(" 一些概念")]),t._v(" "),a("h3",{attrs:{id:"_1-libuv"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-libuv"}},[t._v("#")]),t._v(" 1. Libuv")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[t._v("分类")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("操作")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("时间成本")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("缓存")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("L1缓存")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("1 ns")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}}),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("L2 缓存")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("4 ns")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}}),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("主存储器")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("100 ns")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}}),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("SSD堆积读取")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("16,000ns")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("I/O")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("往返同一数据中心")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("500,000 ns")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}}),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("物理磁盘寻道")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("4,000,000 ns")])])])]),t._v(" "),a("p",[t._v("即便是SSD的访问相对于高速版的CPU，仍然是慢速，于是基于事件驱动的IO就出现了，解决高速设备同步等待慢速设备或访问的问题。libuv一统了网络访问、文件访问，做到了跨平台。")]),t._v(" "),a("h4",{attrs:{id:"libuv-架构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#libuv-架构"}},[t._v("#")]),t._v(" libuv 架构")]),t._v(" "),a("p",[a("img",{attrs:{src:"/node/libuv.jpg",alt:"node"}}),t._v("\nLinux上的epoll，OSX和BSD类OS上的kqueue，SunOS上的event ports以及Windows上的IOCP机制。")]),t._v(" "),a("h3",{attrs:{id:"_2-v8"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-v8"}},[t._v("#")]),t._v(" 2. V8")]),t._v(" "),a("p",[t._v("现在 JS 引擎的执行过程大致是：源代码 ---\x3e抽象语法树 ---\x3e字节码 ---\x3eJIT---\x3e本地代码。")])])}),[],!1,null,null,null);e.default=l.exports}}]);